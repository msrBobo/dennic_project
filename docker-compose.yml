version: '3.8'

services:
  dennic_api:
    image: dennic/api:${dev_dennic_api:-latest}
    restart: always
    networks:
      - ideal_cleaning_network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    env_file:
      - .env
    ports:
      - 9050:9050
    logging:
      driver: ${LOGGING_DRIVER:-json-file}
    depends_on:
      - postgres
      - redis
    deploy:
      mode: replicated
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      placement:
        constraints:
          - node.role == manager


  dennic_admin_api:
    image: dennic/admin_api:${dev_dennic_admin_api:-latest}
    restart: always
    networks:
      - ideal_cleaning_network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    env_file:
      - .env
    ports:
      - 9040:9040
    logging:
      driver: ${LOGGING_DRIVER:-json-file}
    depends_on:
      - postgres
      - redis
    deploy:
      mode: replicated
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      placement:
        constraints:
          - node.role == manager

  dennic_booking:
    image: dennic/booking:${dennic_booking:-latest}
    restart: always
    networks:
      - ideal_cleaning_network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    env_file:
      - .env
    ports:
      - 9090:9090
    logging:
      driver: ${LOGGING_DRIVER:-json-file}
    depends_on:
      - postgres
    deploy:
      mode: replicated
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      placement:
        constraints:
          - node.role == manager

  dennic_healthcare:
    image: dennic/healthcare:${dennic_healthcare:-latest}
    restart: always
    networks:
      - ideal_cleaning_network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    env_file:
      - .env
    ports:
      - 9080:9080
    logging:
      driver: ${LOGGING_DRIVER:-json-file}
    depends_on:
      - postgres
    deploy:
      mode: replicated
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      placement:
        constraints:
          - node.role == manager

  dennic_session:
    image: dennic/session:${dennic_session:-latest}
    restart: always
    networks:
      - ideal_cleaning_network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    env_file:
      - .env
    ports:
      - 9060:9060
    logging:
      driver: ${LOGGING_DRIVER:-json-file}
    depends_on:
      - postgres
    deploy:
      mode: replicated
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      placement:
        constraints:
          - node.role == manager

  dennic_user:
    image: dennic/user:${dennic_user:-latest}
    restart: always
    networks:
      - ideal_cleaning_network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    env_file:
      - .env
    ports:
      - 9070:9070
    logging:
      driver: ${LOGGING_DRIVER:-json-file}
    depends_on:
      - postgres
    deploy:
      mode: replicated
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      placement:
        constraints:
          - node.role == manager


  postgres:
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 20030505
      POSTGRES_DB: dennic
      PGDATA: /data/postgres/asosiy
    volumes:
      - db:/data/postgres/dennicd
    ports:
      - "5432:5432"
    networks:
      - ideal_cleaning_network


  redis:
    image: redis
    ports:
      - "6279:6379"
    networks:
      - ideal_cleaning_network

  jaeger-all-in-one:
    image: jaegertracing/all-in-one:latest
    ports:
      - "6831:6831/udp"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
    networks:
      - ideal_cleaning_network

  # Collector
  otel-collector:
    image: otel/opentelemetry-collector:latest
    command: [ "--config=/etc/otel-collector-config.yaml" ]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317" # OTLP gRPC receiver
    depends_on:
      - jaeger-all-in-one
    networks:
      - ideal_cleaning_network


  migrate:
    image: migrate/migrate
    networks:
      - ideal_cleaning_network
    volumes:
      - ./migrations:/migrations
    command: [ "-path", "/migrations", "-database",  "postgres://postgres:20030505@postgres:5432/dennic?sslmode=disable", "up"]
    links:
      - db
    depends_on:
      - postgres

  minio:
    image: bitnami/minio:2022
    ports:
      - '9000:9000'
      - '9001:9001'
    networks:
      - ideal_cleaning_network
    volumes:
      - minio_data:/minio_data
      - ./config.json:/opt/bitnami/minio/conf/config.json
    environment:
      - MINIO_ROOT_USER=dennic
      - MINIO_ROOT_PASSWORD=dennic_service

volumes:
  db:
  minio_data:
    driver: local
  mongodb_data:
    driver: local

networks:
  ideal_cleaning_network:
    driver: bridge