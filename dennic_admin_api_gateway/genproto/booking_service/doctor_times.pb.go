// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: booking_service/doctor_times.proto

package booking_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DoctorTimeStatusReq struct {
	DepartmentId         string   `protobuf:"bytes,1,opt,name=department_id,json=departmentId,proto3" json:"department_id"`
	DoctorId             string   `protobuf:"bytes,2,opt,name=doctor_id,json=doctorId,proto3" json:"doctor_id"`
	DoctorDate           string   `protobuf:"bytes,3,opt,name=doctor_date,json=doctorDate,proto3" json:"doctor_date"`
	StartTime            string   `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DoctorTimeStatusReq) Reset()         { *m = DoctorTimeStatusReq{} }
func (m *DoctorTimeStatusReq) String() string { return proto.CompactTextString(m) }
func (*DoctorTimeStatusReq) ProtoMessage()    {}
func (*DoctorTimeStatusReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a87a3b7fa39be7cd, []int{0}
}
func (m *DoctorTimeStatusReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DoctorTimeStatusReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DoctorTimeStatusReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DoctorTimeStatusReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoctorTimeStatusReq.Merge(m, src)
}
func (m *DoctorTimeStatusReq) XXX_Size() int {
	return m.Size()
}
func (m *DoctorTimeStatusReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DoctorTimeStatusReq.DiscardUnknown(m)
}

var xxx_messageInfo_DoctorTimeStatusReq proto.InternalMessageInfo

func (m *DoctorTimeStatusReq) GetDepartmentId() string {
	if m != nil {
		return m.DepartmentId
	}
	return ""
}

func (m *DoctorTimeStatusReq) GetDoctorId() string {
	if m != nil {
		return m.DoctorId
	}
	return ""
}

func (m *DoctorTimeStatusReq) GetDoctorDate() string {
	if m != nil {
		return m.DoctorDate
	}
	return ""
}

func (m *DoctorTimeStatusReq) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

type DoctorTimeStatus struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DoctorTimeStatus) Reset()         { *m = DoctorTimeStatus{} }
func (m *DoctorTimeStatus) String() string { return proto.CompactTextString(m) }
func (*DoctorTimeStatus) ProtoMessage()    {}
func (*DoctorTimeStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_a87a3b7fa39be7cd, []int{1}
}
func (m *DoctorTimeStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DoctorTimeStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DoctorTimeStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DoctorTimeStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoctorTimeStatus.Merge(m, src)
}
func (m *DoctorTimeStatus) XXX_Size() int {
	return m.Size()
}
func (m *DoctorTimeStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_DoctorTimeStatus.DiscardUnknown(m)
}

var xxx_messageInfo_DoctorTimeStatus proto.InternalMessageInfo

func (m *DoctorTimeStatus) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type DoctorTime struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	DepartmentId         string   `protobuf:"bytes,2,opt,name=department_id,json=departmentId,proto3" json:"department_id"`
	DoctorId             string   `protobuf:"bytes,3,opt,name=doctor_id,json=doctorId,proto3" json:"doctor_id"`
	DoctorDate           string   `protobuf:"bytes,4,opt,name=doctor_date,json=doctorDate,proto3" json:"doctor_date"`
	StartTime            string   `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time"`
	EndTime              string   `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time"`
	Status               string   `protobuf:"bytes,7,opt,name=status,proto3" json:"status"`
	CreatedAt            string   `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            string   `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	DeletedAt            string   `protobuf:"bytes,10,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DoctorTime) Reset()         { *m = DoctorTime{} }
func (m *DoctorTime) String() string { return proto.CompactTextString(m) }
func (*DoctorTime) ProtoMessage()    {}
func (*DoctorTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_a87a3b7fa39be7cd, []int{2}
}
func (m *DoctorTime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DoctorTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DoctorTime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DoctorTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoctorTime.Merge(m, src)
}
func (m *DoctorTime) XXX_Size() int {
	return m.Size()
}
func (m *DoctorTime) XXX_DiscardUnknown() {
	xxx_messageInfo_DoctorTime.DiscardUnknown(m)
}

var xxx_messageInfo_DoctorTime proto.InternalMessageInfo

func (m *DoctorTime) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DoctorTime) GetDepartmentId() string {
	if m != nil {
		return m.DepartmentId
	}
	return ""
}

func (m *DoctorTime) GetDoctorId() string {
	if m != nil {
		return m.DoctorId
	}
	return ""
}

func (m *DoctorTime) GetDoctorDate() string {
	if m != nil {
		return m.DoctorDate
	}
	return ""
}

func (m *DoctorTime) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *DoctorTime) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *DoctorTime) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *DoctorTime) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *DoctorTime) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *DoctorTime) GetDeletedAt() string {
	if m != nil {
		return m.DeletedAt
	}
	return ""
}

type DoctorTimes struct {
	Count                int64         `protobuf:"varint,1,opt,name=count,proto3" json:"count"`
	DoctorTimes          []*DoctorTime `protobuf:"bytes,2,rep,name=doctor_times,json=doctorTimes,proto3" json:"doctor_times"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DoctorTimes) Reset()         { *m = DoctorTimes{} }
func (m *DoctorTimes) String() string { return proto.CompactTextString(m) }
func (*DoctorTimes) ProtoMessage()    {}
func (*DoctorTimes) Descriptor() ([]byte, []int) {
	return fileDescriptor_a87a3b7fa39be7cd, []int{3}
}
func (m *DoctorTimes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DoctorTimes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DoctorTimes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DoctorTimes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoctorTimes.Merge(m, src)
}
func (m *DoctorTimes) XXX_Size() int {
	return m.Size()
}
func (m *DoctorTimes) XXX_DiscardUnknown() {
	xxx_messageInfo_DoctorTimes.DiscardUnknown(m)
}

var xxx_messageInfo_DoctorTimes proto.InternalMessageInfo

func (m *DoctorTimes) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *DoctorTimes) GetDoctorTimes() []*DoctorTime {
	if m != nil {
		return m.DoctorTimes
	}
	return nil
}

type CreateDoctorTimeReq struct {
	DepartmentId         string   `protobuf:"bytes,1,opt,name=department_id,json=departmentId,proto3" json:"department_id"`
	DoctorId             string   `protobuf:"bytes,2,opt,name=doctor_id,json=doctorId,proto3" json:"doctor_id"`
	DoctorDate           string   `protobuf:"bytes,3,opt,name=doctor_date,json=doctorDate,proto3" json:"doctor_date"`
	StartTime            string   `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time"`
	EndTime              string   `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time"`
	Status               string   `protobuf:"bytes,6,opt,name=status,proto3" json:"status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateDoctorTimeReq) Reset()         { *m = CreateDoctorTimeReq{} }
func (m *CreateDoctorTimeReq) String() string { return proto.CompactTextString(m) }
func (*CreateDoctorTimeReq) ProtoMessage()    {}
func (*CreateDoctorTimeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a87a3b7fa39be7cd, []int{4}
}
func (m *CreateDoctorTimeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateDoctorTimeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateDoctorTimeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateDoctorTimeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateDoctorTimeReq.Merge(m, src)
}
func (m *CreateDoctorTimeReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateDoctorTimeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateDoctorTimeReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateDoctorTimeReq proto.InternalMessageInfo

func (m *CreateDoctorTimeReq) GetDepartmentId() string {
	if m != nil {
		return m.DepartmentId
	}
	return ""
}

func (m *CreateDoctorTimeReq) GetDoctorId() string {
	if m != nil {
		return m.DoctorId
	}
	return ""
}

func (m *CreateDoctorTimeReq) GetDoctorDate() string {
	if m != nil {
		return m.DoctorDate
	}
	return ""
}

func (m *CreateDoctorTimeReq) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *CreateDoctorTimeReq) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *CreateDoctorTimeReq) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type UpdateDoctorTimeReq struct {
	Field                string   `protobuf:"bytes,1,opt,name=field,proto3" json:"field"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value"`
	DepartmentId         string   `protobuf:"bytes,3,opt,name=department_id,json=departmentId,proto3" json:"department_id"`
	DoctorId             string   `protobuf:"bytes,4,opt,name=doctor_id,json=doctorId,proto3" json:"doctor_id"`
	DoctorDate           string   `protobuf:"bytes,5,opt,name=doctor_date,json=doctorDate,proto3" json:"doctor_date"`
	StartTime            string   `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time"`
	EndTime              string   `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3" json:"end_time"`
	Status               string   `protobuf:"bytes,8,opt,name=status,proto3" json:"status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateDoctorTimeReq) Reset()         { *m = UpdateDoctorTimeReq{} }
func (m *UpdateDoctorTimeReq) String() string { return proto.CompactTextString(m) }
func (*UpdateDoctorTimeReq) ProtoMessage()    {}
func (*UpdateDoctorTimeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a87a3b7fa39be7cd, []int{5}
}
func (m *UpdateDoctorTimeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateDoctorTimeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateDoctorTimeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateDoctorTimeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDoctorTimeReq.Merge(m, src)
}
func (m *UpdateDoctorTimeReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateDoctorTimeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDoctorTimeReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDoctorTimeReq proto.InternalMessageInfo

func (m *UpdateDoctorTimeReq) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *UpdateDoctorTimeReq) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *UpdateDoctorTimeReq) GetDepartmentId() string {
	if m != nil {
		return m.DepartmentId
	}
	return ""
}

func (m *UpdateDoctorTimeReq) GetDoctorId() string {
	if m != nil {
		return m.DoctorId
	}
	return ""
}

func (m *UpdateDoctorTimeReq) GetDoctorDate() string {
	if m != nil {
		return m.DoctorDate
	}
	return ""
}

func (m *UpdateDoctorTimeReq) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *UpdateDoctorTimeReq) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *UpdateDoctorTimeReq) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type DoctorTimeFieldValueReq struct {
	Field                string   `protobuf:"bytes,1,opt,name=field,proto3" json:"field"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value"`
	IsActive             bool     `protobuf:"varint,3,opt,name=is_active,json=isActive,proto3" json:"is_active"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DoctorTimeFieldValueReq) Reset()         { *m = DoctorTimeFieldValueReq{} }
func (m *DoctorTimeFieldValueReq) String() string { return proto.CompactTextString(m) }
func (*DoctorTimeFieldValueReq) ProtoMessage()    {}
func (*DoctorTimeFieldValueReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a87a3b7fa39be7cd, []int{6}
}
func (m *DoctorTimeFieldValueReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DoctorTimeFieldValueReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DoctorTimeFieldValueReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DoctorTimeFieldValueReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoctorTimeFieldValueReq.Merge(m, src)
}
func (m *DoctorTimeFieldValueReq) XXX_Size() int {
	return m.Size()
}
func (m *DoctorTimeFieldValueReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DoctorTimeFieldValueReq.DiscardUnknown(m)
}

var xxx_messageInfo_DoctorTimeFieldValueReq proto.InternalMessageInfo

func (m *DoctorTimeFieldValueReq) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *DoctorTimeFieldValueReq) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *DoctorTimeFieldValueReq) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

type DoctorTimeDeleteStatus struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DoctorTimeDeleteStatus) Reset()         { *m = DoctorTimeDeleteStatus{} }
func (m *DoctorTimeDeleteStatus) String() string { return proto.CompactTextString(m) }
func (*DoctorTimeDeleteStatus) ProtoMessage()    {}
func (*DoctorTimeDeleteStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_a87a3b7fa39be7cd, []int{7}
}
func (m *DoctorTimeDeleteStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DoctorTimeDeleteStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DoctorTimeDeleteStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DoctorTimeDeleteStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoctorTimeDeleteStatus.Merge(m, src)
}
func (m *DoctorTimeDeleteStatus) XXX_Size() int {
	return m.Size()
}
func (m *DoctorTimeDeleteStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_DoctorTimeDeleteStatus.DiscardUnknown(m)
}

var xxx_messageInfo_DoctorTimeDeleteStatus proto.InternalMessageInfo

func (m *DoctorTimeDeleteStatus) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type GetAllDoctorTimesReq struct {
	Field                string   `protobuf:"bytes,1,opt,name=field,proto3" json:"field"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value"`
	IsActive             bool     `protobuf:"varint,3,opt,name=is_active,json=isActive,proto3" json:"is_active"`
	Page                 uint64   `protobuf:"varint,4,opt,name=page,proto3" json:"page"`
	Limit                uint64   `protobuf:"varint,5,opt,name=limit,proto3" json:"limit"`
	OrderBy              string   `protobuf:"bytes,6,opt,name=order_by,json=orderBy,proto3" json:"order_by"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllDoctorTimesReq) Reset()         { *m = GetAllDoctorTimesReq{} }
func (m *GetAllDoctorTimesReq) String() string { return proto.CompactTextString(m) }
func (*GetAllDoctorTimesReq) ProtoMessage()    {}
func (*GetAllDoctorTimesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a87a3b7fa39be7cd, []int{8}
}
func (m *GetAllDoctorTimesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllDoctorTimesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllDoctorTimesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllDoctorTimesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllDoctorTimesReq.Merge(m, src)
}
func (m *GetAllDoctorTimesReq) XXX_Size() int {
	return m.Size()
}
func (m *GetAllDoctorTimesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllDoctorTimesReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllDoctorTimesReq proto.InternalMessageInfo

func (m *GetAllDoctorTimesReq) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *GetAllDoctorTimesReq) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *GetAllDoctorTimesReq) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *GetAllDoctorTimesReq) GetPage() uint64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetAllDoctorTimesReq) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetAllDoctorTimesReq) GetOrderBy() string {
	if m != nil {
		return m.OrderBy
	}
	return ""
}

func init() {
	proto.RegisterType((*DoctorTimeStatusReq)(nil), "booking_service.DoctorTimeStatusReq")
	proto.RegisterType((*DoctorTimeStatus)(nil), "booking_service.DoctorTimeStatus")
	proto.RegisterType((*DoctorTime)(nil), "booking_service.DoctorTime")
	proto.RegisterType((*DoctorTimes)(nil), "booking_service.DoctorTimes")
	proto.RegisterType((*CreateDoctorTimeReq)(nil), "booking_service.CreateDoctorTimeReq")
	proto.RegisterType((*UpdateDoctorTimeReq)(nil), "booking_service.UpdateDoctorTimeReq")
	proto.RegisterType((*DoctorTimeFieldValueReq)(nil), "booking_service.DoctorTimeFieldValueReq")
	proto.RegisterType((*DoctorTimeDeleteStatus)(nil), "booking_service.DoctorTimeDeleteStatus")
	proto.RegisterType((*GetAllDoctorTimesReq)(nil), "booking_service.GetAllDoctorTimesReq")
}

func init() {
	proto.RegisterFile("booking_service/doctor_times.proto", fileDescriptor_a87a3b7fa39be7cd)
}

var fileDescriptor_a87a3b7fa39be7cd = []byte{
	// 622 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x95, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0xb1, 0xe3, 0x24, 0xce, 0xa4, 0x85, 0x74, 0x13, 0x15, 0x93, 0x40, 0x28, 0xa6, 0x88,
	0x88, 0x43, 0x40, 0xe5, 0x8e, 0x94, 0x12, 0x11, 0xf5, 0x6a, 0x68, 0xc5, 0x05, 0x59, 0x8e, 0x77,
	0xa9, 0x56, 0x38, 0x71, 0xb0, 0x37, 0x91, 0xfa, 0x24, 0xf0, 0x00, 0x9c, 0xb9, 0xf3, 0x06, 0x88,
	0x13, 0x8f, 0x80, 0xc2, 0x3b, 0x70, 0x46, 0xde, 0xdd, 0xd4, 0x5f, 0xa9, 0x2d, 0x10, 0x07, 0x6e,
	0x9e, 0xf9, 0x8f, 0xc7, 0xf3, 0x9b, 0x9d, 0xf1, 0x82, 0x39, 0xf5, 0xfd, 0x77, 0x74, 0x7e, 0x6e,
	0x87, 0x24, 0x58, 0x51, 0x97, 0x3c, 0xc6, 0xbe, 0xcb, 0xfc, 0xc0, 0x66, 0x74, 0x46, 0xc2, 0xe1,
	0x22, 0xf0, 0x99, 0x8f, 0x6e, 0x64, 0x62, 0xcc, 0x0f, 0x0a, 0xb4, 0xc7, 0x3c, 0xee, 0x15, 0x9d,
	0x91, 0x97, 0xcc, 0x61, 0xcb, 0xd0, 0x22, 0xef, 0xd1, 0x7d, 0xd8, 0xc5, 0x64, 0xe1, 0x04, 0x6c,
	0x46, 0xe6, 0xcc, 0xa6, 0xd8, 0x50, 0x0e, 0x94, 0x41, 0xc3, 0xda, 0x89, 0x9d, 0x27, 0x18, 0xf5,
	0xa0, 0x21, 0xbf, 0x41, 0xb1, 0xa1, 0xf2, 0x00, 0x5d, 0x38, 0x4e, 0x30, 0xba, 0x0b, 0x4d, 0x29,
	0x62, 0x87, 0x11, 0xa3, 0xc2, 0x65, 0x10, 0xae, 0xb1, 0xc3, 0x08, 0xba, 0x03, 0x10, 0x32, 0x27,
	0x60, 0xbc, 0x40, 0x43, 0xe3, 0x7a, 0x83, 0x7b, 0xa2, 0x52, 0xcc, 0x47, 0xd0, 0xca, 0x16, 0x86,
	0xf6, 0xa1, 0x16, 0xf2, 0x27, 0x59, 0x8e, 0xb4, 0xcc, 0xcf, 0x2a, 0x40, 0x1c, 0x8c, 0xae, 0x83,
	0x2a, 0x2b, 0xae, 0x58, 0x2a, 0xc5, 0x79, 0x18, 0xb5, 0x0c, 0xa6, 0x52, 0x0c, 0xa3, 0x95, 0xc0,
	0x54, 0x33, 0x30, 0xe8, 0x16, 0xe8, 0x64, 0x8e, 0x85, 0x58, 0xe3, 0x62, 0x9d, 0xcc, 0x31, 0x97,
	0x62, 0xa6, 0x7a, 0x92, 0x29, 0xca, 0xe8, 0x06, 0xc4, 0x61, 0x04, 0xdb, 0x0e, 0x33, 0x74, 0x91,
	0x51, 0x7a, 0x46, 0x2c, 0x92, 0x97, 0x0b, 0xbc, 0x91, 0x1b, 0x42, 0x96, 0x1e, 0x21, 0x63, 0xe2,
	0x11, 0x29, 0x83, 0x90, 0xa5, 0x67, 0xc4, 0x4c, 0x17, 0x9a, 0x71, 0xbf, 0x42, 0xd4, 0x81, 0xaa,
	0xeb, 0x2f, 0xe7, 0x4c, 0xf6, 0x4c, 0x18, 0xe8, 0x19, 0xec, 0x24, 0x47, 0xc8, 0x50, 0x0f, 0x2a,
	0x83, 0xe6, 0x51, 0x6f, 0x98, 0x99, 0xa1, 0x61, 0x9c, 0xc9, 0x92, 0x5d, 0xe2, 0x59, 0xcd, 0x6f,
	0x0a, 0xb4, 0x9f, 0xf3, 0x82, 0x13, 0x11, 0xff, 0xc3, 0x6c, 0xa5, 0x8e, 0xa3, 0x7a, 0xd5, 0x71,
	0xd4, 0x52, 0x23, 0xf6, 0x4b, 0x81, 0xf6, 0x29, 0x6f, 0x6f, 0x1a, 0xa6, 0x03, 0xd5, 0xb7, 0x94,
	0x78, 0x1b, 0x08, 0x61, 0x44, 0xde, 0x95, 0xe3, 0x2d, 0x89, 0xac, 0x5c, 0x18, 0x79, 0xf0, 0x4a,
	0x19, 0xb8, 0x56, 0x0c, 0x5e, 0x2d, 0x01, 0xaf, 0x15, 0x81, 0xd7, 0xaf, 0x02, 0xd7, 0x53, 0xe0,
	0x53, 0xb8, 0x19, 0x13, 0xbf, 0x88, 0xe8, 0xce, 0x22, 0x98, 0x3f, 0x65, 0xef, 0x41, 0x83, 0x86,
	0xb6, 0xe3, 0x32, 0xba, 0x12, 0x07, 0xa6, 0x5b, 0x3a, 0x0d, 0x47, 0xdc, 0x36, 0x9f, 0xc0, 0x7e,
	0xfc, 0x8d, 0x31, 0x9f, 0xd2, 0xad, 0x1b, 0xaf, 0x5f, 0x56, 0xf5, 0x49, 0x81, 0xce, 0x84, 0xb0,
	0x91, 0xe7, 0x25, 0xe6, 0xf8, 0x5f, 0xd6, 0x84, 0x10, 0x68, 0x0b, 0xe7, 0x5c, 0x0c, 0x8f, 0x66,
	0xf1, 0xe7, 0x28, 0x8d, 0x47, 0x67, 0x94, 0xf1, 0xc6, 0x6b, 0x96, 0x30, 0xa2, 0xa6, 0xfa, 0x01,
	0x26, 0x81, 0x3d, 0xbd, 0xd8, 0x2c, 0x37, 0xb7, 0x8f, 0x2f, 0x8e, 0xbe, 0x68, 0xb0, 0x97, 0xf8,
	0x8b, 0x89, 0x85, 0x41, 0xa7, 0xd0, 0xca, 0xee, 0x05, 0x3a, 0xcc, 0xad, 0xd5, 0x96, 0xd5, 0xe9,
	0x16, 0x2d, 0x1f, 0x3a, 0x83, 0xdd, 0x09, 0x61, 0x09, 0xc7, 0xa0, 0x20, 0x3a, 0x75, 0x92, 0xc5,
	0x79, 0x5f, 0xc3, 0x5e, 0xae, 0xd5, 0xe8, 0x41, 0xee, 0x8d, 0x6d, 0xc7, 0xd1, 0xbd, 0x5d, 0x90,
	0x38, 0x8c, 0x1a, 0x91, 0xdd, 0xa9, 0x2d, 0x8d, 0xd8, 0xb2, 0x76, 0xc5, 0x05, 0x13, 0x68, 0x89,
	0x21, 0xfa, 0xab, 0x5e, 0x3c, 0x2c, 0x88, 0x4c, 0xcd, 0xe6, 0x1b, 0x40, 0x13, 0x92, 0xbb, 0xa3,
	0x0e, 0x0b, 0x5e, 0xbf, 0xbc, 0x5f, 0xbb, 0xf7, 0x4a, 0xa3, 0x8e, 0x5b, 0x5f, 0xd7, 0x7d, 0xe5,
	0xfb, 0xba, 0xaf, 0xfc, 0x58, 0xf7, 0x95, 0x8f, 0x3f, 0xfb, 0xd7, 0xa6, 0x35, 0x7e, 0x89, 0x3f,
	0xfd, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x68, 0x13, 0x60, 0x3a, 0xea, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DoctorTimeServiceClient is the client API for DoctorTimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DoctorTimeServiceClient interface {
	// doctorTime
	CreateDoctorTime(ctx context.Context, in *CreateDoctorTimeReq, opts ...grpc.CallOption) (*DoctorTime, error)
	GetDoctorTime(ctx context.Context, in *DoctorTimeFieldValueReq, opts ...grpc.CallOption) (*DoctorTime, error)
	GetAllDoctorTimes(ctx context.Context, in *GetAllDoctorTimesReq, opts ...grpc.CallOption) (*DoctorTimes, error)
	UpdateDoctorTime(ctx context.Context, in *UpdateDoctorTimeReq, opts ...grpc.CallOption) (*DoctorTime, error)
	DeleteDoctorTime(ctx context.Context, in *DoctorTimeFieldValueReq, opts ...grpc.CallOption) (*DoctorTimeDeleteStatus, error)
	GeDoctorTimeStatus(ctx context.Context, in *DoctorTimeStatusReq, opts ...grpc.CallOption) (*DoctorTimeStatus, error)
}

type doctorTimeServiceClient struct {
	cc *grpc.ClientConn
}

func NewDoctorTimeServiceClient(cc *grpc.ClientConn) DoctorTimeServiceClient {
	return &doctorTimeServiceClient{cc}
}

func (c *doctorTimeServiceClient) CreateDoctorTime(ctx context.Context, in *CreateDoctorTimeReq, opts ...grpc.CallOption) (*DoctorTime, error) {
	out := new(DoctorTime)
	err := c.cc.Invoke(ctx, "/booking_service.DoctorTimeService/CreateDoctorTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorTimeServiceClient) GetDoctorTime(ctx context.Context, in *DoctorTimeFieldValueReq, opts ...grpc.CallOption) (*DoctorTime, error) {
	out := new(DoctorTime)
	err := c.cc.Invoke(ctx, "/booking_service.DoctorTimeService/GetDoctorTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorTimeServiceClient) GetAllDoctorTimes(ctx context.Context, in *GetAllDoctorTimesReq, opts ...grpc.CallOption) (*DoctorTimes, error) {
	out := new(DoctorTimes)
	err := c.cc.Invoke(ctx, "/booking_service.DoctorTimeService/GetAllDoctorTimes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorTimeServiceClient) UpdateDoctorTime(ctx context.Context, in *UpdateDoctorTimeReq, opts ...grpc.CallOption) (*DoctorTime, error) {
	out := new(DoctorTime)
	err := c.cc.Invoke(ctx, "/booking_service.DoctorTimeService/UpdateDoctorTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorTimeServiceClient) DeleteDoctorTime(ctx context.Context, in *DoctorTimeFieldValueReq, opts ...grpc.CallOption) (*DoctorTimeDeleteStatus, error) {
	out := new(DoctorTimeDeleteStatus)
	err := c.cc.Invoke(ctx, "/booking_service.DoctorTimeService/DeleteDoctorTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorTimeServiceClient) GeDoctorTimeStatus(ctx context.Context, in *DoctorTimeStatusReq, opts ...grpc.CallOption) (*DoctorTimeStatus, error) {
	out := new(DoctorTimeStatus)
	err := c.cc.Invoke(ctx, "/booking_service.DoctorTimeService/GeDoctorTimeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DoctorTimeServiceServer is the server API for DoctorTimeService service.
type DoctorTimeServiceServer interface {
	// doctorTime
	CreateDoctorTime(context.Context, *CreateDoctorTimeReq) (*DoctorTime, error)
	GetDoctorTime(context.Context, *DoctorTimeFieldValueReq) (*DoctorTime, error)
	GetAllDoctorTimes(context.Context, *GetAllDoctorTimesReq) (*DoctorTimes, error)
	UpdateDoctorTime(context.Context, *UpdateDoctorTimeReq) (*DoctorTime, error)
	DeleteDoctorTime(context.Context, *DoctorTimeFieldValueReq) (*DoctorTimeDeleteStatus, error)
	GeDoctorTimeStatus(context.Context, *DoctorTimeStatusReq) (*DoctorTimeStatus, error)
}

// UnimplementedDoctorTimeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDoctorTimeServiceServer struct {
}

func (*UnimplementedDoctorTimeServiceServer) CreateDoctorTime(ctx context.Context, req *CreateDoctorTimeReq) (*DoctorTime, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDoctorTime not implemented")
}
func (*UnimplementedDoctorTimeServiceServer) GetDoctorTime(ctx context.Context, req *DoctorTimeFieldValueReq) (*DoctorTime, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDoctorTime not implemented")
}
func (*UnimplementedDoctorTimeServiceServer) GetAllDoctorTimes(ctx context.Context, req *GetAllDoctorTimesReq) (*DoctorTimes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDoctorTimes not implemented")
}
func (*UnimplementedDoctorTimeServiceServer) UpdateDoctorTime(ctx context.Context, req *UpdateDoctorTimeReq) (*DoctorTime, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDoctorTime not implemented")
}
func (*UnimplementedDoctorTimeServiceServer) DeleteDoctorTime(ctx context.Context, req *DoctorTimeFieldValueReq) (*DoctorTimeDeleteStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDoctorTime not implemented")
}
func (*UnimplementedDoctorTimeServiceServer) GeDoctorTimeStatus(ctx context.Context, req *DoctorTimeStatusReq) (*DoctorTimeStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeDoctorTimeStatus not implemented")
}

func RegisterDoctorTimeServiceServer(s *grpc.Server, srv DoctorTimeServiceServer) {
	s.RegisterService(&_DoctorTimeService_serviceDesc, srv)
}

func _DoctorTimeService_CreateDoctorTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDoctorTimeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorTimeServiceServer).CreateDoctorTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.DoctorTimeService/CreateDoctorTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorTimeServiceServer).CreateDoctorTime(ctx, req.(*CreateDoctorTimeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorTimeService_GetDoctorTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoctorTimeFieldValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorTimeServiceServer).GetDoctorTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.DoctorTimeService/GetDoctorTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorTimeServiceServer).GetDoctorTime(ctx, req.(*DoctorTimeFieldValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorTimeService_GetAllDoctorTimes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllDoctorTimesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorTimeServiceServer).GetAllDoctorTimes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.DoctorTimeService/GetAllDoctorTimes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorTimeServiceServer).GetAllDoctorTimes(ctx, req.(*GetAllDoctorTimesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorTimeService_UpdateDoctorTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDoctorTimeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorTimeServiceServer).UpdateDoctorTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.DoctorTimeService/UpdateDoctorTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorTimeServiceServer).UpdateDoctorTime(ctx, req.(*UpdateDoctorTimeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorTimeService_DeleteDoctorTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoctorTimeFieldValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorTimeServiceServer).DeleteDoctorTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.DoctorTimeService/DeleteDoctorTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorTimeServiceServer).DeleteDoctorTime(ctx, req.(*DoctorTimeFieldValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorTimeService_GeDoctorTimeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoctorTimeStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorTimeServiceServer).GeDoctorTimeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.DoctorTimeService/GeDoctorTimeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorTimeServiceServer).GeDoctorTimeStatus(ctx, req.(*DoctorTimeStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _DoctorTimeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "booking_service.DoctorTimeService",
	HandlerType: (*DoctorTimeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDoctorTime",
			Handler:    _DoctorTimeService_CreateDoctorTime_Handler,
		},
		{
			MethodName: "GetDoctorTime",
			Handler:    _DoctorTimeService_GetDoctorTime_Handler,
		},
		{
			MethodName: "GetAllDoctorTimes",
			Handler:    _DoctorTimeService_GetAllDoctorTimes_Handler,
		},
		{
			MethodName: "UpdateDoctorTime",
			Handler:    _DoctorTimeService_UpdateDoctorTime_Handler,
		},
		{
			MethodName: "DeleteDoctorTime",
			Handler:    _DoctorTimeService_DeleteDoctorTime_Handler,
		},
		{
			MethodName: "GeDoctorTimeStatus",
			Handler:    _DoctorTimeService_GeDoctorTimeStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "booking_service/doctor_times.proto",
}

func (m *DoctorTimeStatusReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoctorTimeStatusReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DoctorTimeStatusReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.StartTime) > 0 {
		i -= len(m.StartTime)
		copy(dAtA[i:], m.StartTime)
		i = encodeVarintDoctorTimes(dAtA, i, uint64(len(m.StartTime)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DoctorDate) > 0 {
		i -= len(m.DoctorDate)
		copy(dAtA[i:], m.DoctorDate)
		i = encodeVarintDoctorTimes(dAtA, i, uint64(len(m.DoctorDate)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DoctorId) > 0 {
		i -= len(m.DoctorId)
		copy(dAtA[i:], m.DoctorId)
		i = encodeVarintDoctorTimes(dAtA, i, uint64(len(m.DoctorId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DepartmentId) > 0 {
		i -= len(m.DepartmentId)
		copy(dAtA[i:], m.DepartmentId)
		i = encodeVarintDoctorTimes(dAtA, i, uint64(len(m.DepartmentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DoctorTimeStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoctorTimeStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DoctorTimeStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintDoctorTimes(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DoctorTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoctorTime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DoctorTime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DeletedAt) > 0 {
		i -= len(m.DeletedAt)
		copy(dAtA[i:], m.DeletedAt)
		i = encodeVarintDoctorTimes(dAtA, i, uint64(len(m.DeletedAt)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintDoctorTimes(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintDoctorTimes(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintDoctorTimes(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.EndTime) > 0 {
		i -= len(m.EndTime)
		copy(dAtA[i:], m.EndTime)
		i = encodeVarintDoctorTimes(dAtA, i, uint64(len(m.EndTime)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.StartTime) > 0 {
		i -= len(m.StartTime)
		copy(dAtA[i:], m.StartTime)
		i = encodeVarintDoctorTimes(dAtA, i, uint64(len(m.StartTime)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DoctorDate) > 0 {
		i -= len(m.DoctorDate)
		copy(dAtA[i:], m.DoctorDate)
		i = encodeVarintDoctorTimes(dAtA, i, uint64(len(m.DoctorDate)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DoctorId) > 0 {
		i -= len(m.DoctorId)
		copy(dAtA[i:], m.DoctorId)
		i = encodeVarintDoctorTimes(dAtA, i, uint64(len(m.DoctorId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DepartmentId) > 0 {
		i -= len(m.DepartmentId)
		copy(dAtA[i:], m.DepartmentId)
		i = encodeVarintDoctorTimes(dAtA, i, uint64(len(m.DepartmentId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintDoctorTimes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DoctorTimes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoctorTimes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DoctorTimes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DoctorTimes) > 0 {
		for iNdEx := len(m.DoctorTimes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DoctorTimes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDoctorTimes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Count != 0 {
		i = encodeVarintDoctorTimes(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateDoctorTimeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateDoctorTimeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateDoctorTimeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintDoctorTimes(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EndTime) > 0 {
		i -= len(m.EndTime)
		copy(dAtA[i:], m.EndTime)
		i = encodeVarintDoctorTimes(dAtA, i, uint64(len(m.EndTime)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.StartTime) > 0 {
		i -= len(m.StartTime)
		copy(dAtA[i:], m.StartTime)
		i = encodeVarintDoctorTimes(dAtA, i, uint64(len(m.StartTime)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DoctorDate) > 0 {
		i -= len(m.DoctorDate)
		copy(dAtA[i:], m.DoctorDate)
		i = encodeVarintDoctorTimes(dAtA, i, uint64(len(m.DoctorDate)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DoctorId) > 0 {
		i -= len(m.DoctorId)
		copy(dAtA[i:], m.DoctorId)
		i = encodeVarintDoctorTimes(dAtA, i, uint64(len(m.DoctorId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DepartmentId) > 0 {
		i -= len(m.DepartmentId)
		copy(dAtA[i:], m.DepartmentId)
		i = encodeVarintDoctorTimes(dAtA, i, uint64(len(m.DepartmentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateDoctorTimeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDoctorTimeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateDoctorTimeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintDoctorTimes(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.EndTime) > 0 {
		i -= len(m.EndTime)
		copy(dAtA[i:], m.EndTime)
		i = encodeVarintDoctorTimes(dAtA, i, uint64(len(m.EndTime)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.StartTime) > 0 {
		i -= len(m.StartTime)
		copy(dAtA[i:], m.StartTime)
		i = encodeVarintDoctorTimes(dAtA, i, uint64(len(m.StartTime)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DoctorDate) > 0 {
		i -= len(m.DoctorDate)
		copy(dAtA[i:], m.DoctorDate)
		i = encodeVarintDoctorTimes(dAtA, i, uint64(len(m.DoctorDate)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DoctorId) > 0 {
		i -= len(m.DoctorId)
		copy(dAtA[i:], m.DoctorId)
		i = encodeVarintDoctorTimes(dAtA, i, uint64(len(m.DoctorId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DepartmentId) > 0 {
		i -= len(m.DepartmentId)
		copy(dAtA[i:], m.DepartmentId)
		i = encodeVarintDoctorTimes(dAtA, i, uint64(len(m.DepartmentId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintDoctorTimes(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Field) > 0 {
		i -= len(m.Field)
		copy(dAtA[i:], m.Field)
		i = encodeVarintDoctorTimes(dAtA, i, uint64(len(m.Field)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DoctorTimeFieldValueReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoctorTimeFieldValueReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DoctorTimeFieldValueReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintDoctorTimes(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Field) > 0 {
		i -= len(m.Field)
		copy(dAtA[i:], m.Field)
		i = encodeVarintDoctorTimes(dAtA, i, uint64(len(m.Field)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DoctorTimeDeleteStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoctorTimeDeleteStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DoctorTimeDeleteStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAllDoctorTimesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllDoctorTimesReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllDoctorTimesReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OrderBy) > 0 {
		i -= len(m.OrderBy)
		copy(dAtA[i:], m.OrderBy)
		i = encodeVarintDoctorTimes(dAtA, i, uint64(len(m.OrderBy)))
		i--
		dAtA[i] = 0x32
	}
	if m.Limit != 0 {
		i = encodeVarintDoctorTimes(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x28
	}
	if m.Page != 0 {
		i = encodeVarintDoctorTimes(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x20
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintDoctorTimes(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Field) > 0 {
		i -= len(m.Field)
		copy(dAtA[i:], m.Field)
		i = encodeVarintDoctorTimes(dAtA, i, uint64(len(m.Field)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDoctorTimes(dAtA []byte, offset int, v uint64) int {
	offset -= sovDoctorTimes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DoctorTimeStatusReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DepartmentId)
	if l > 0 {
		n += 1 + l + sovDoctorTimes(uint64(l))
	}
	l = len(m.DoctorId)
	if l > 0 {
		n += 1 + l + sovDoctorTimes(uint64(l))
	}
	l = len(m.DoctorDate)
	if l > 0 {
		n += 1 + l + sovDoctorTimes(uint64(l))
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovDoctorTimes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DoctorTimeStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovDoctorTimes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DoctorTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDoctorTimes(uint64(m.Id))
	}
	l = len(m.DepartmentId)
	if l > 0 {
		n += 1 + l + sovDoctorTimes(uint64(l))
	}
	l = len(m.DoctorId)
	if l > 0 {
		n += 1 + l + sovDoctorTimes(uint64(l))
	}
	l = len(m.DoctorDate)
	if l > 0 {
		n += 1 + l + sovDoctorTimes(uint64(l))
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovDoctorTimes(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovDoctorTimes(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovDoctorTimes(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovDoctorTimes(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovDoctorTimes(uint64(l))
	}
	l = len(m.DeletedAt)
	if l > 0 {
		n += 1 + l + sovDoctorTimes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DoctorTimes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovDoctorTimes(uint64(m.Count))
	}
	if len(m.DoctorTimes) > 0 {
		for _, e := range m.DoctorTimes {
			l = e.Size()
			n += 1 + l + sovDoctorTimes(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateDoctorTimeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DepartmentId)
	if l > 0 {
		n += 1 + l + sovDoctorTimes(uint64(l))
	}
	l = len(m.DoctorId)
	if l > 0 {
		n += 1 + l + sovDoctorTimes(uint64(l))
	}
	l = len(m.DoctorDate)
	if l > 0 {
		n += 1 + l + sovDoctorTimes(uint64(l))
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovDoctorTimes(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovDoctorTimes(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovDoctorTimes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateDoctorTimeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovDoctorTimes(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovDoctorTimes(uint64(l))
	}
	l = len(m.DepartmentId)
	if l > 0 {
		n += 1 + l + sovDoctorTimes(uint64(l))
	}
	l = len(m.DoctorId)
	if l > 0 {
		n += 1 + l + sovDoctorTimes(uint64(l))
	}
	l = len(m.DoctorDate)
	if l > 0 {
		n += 1 + l + sovDoctorTimes(uint64(l))
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovDoctorTimes(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovDoctorTimes(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovDoctorTimes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DoctorTimeFieldValueReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovDoctorTimes(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovDoctorTimes(uint64(l))
	}
	if m.IsActive {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DoctorTimeDeleteStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAllDoctorTimesReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovDoctorTimes(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovDoctorTimes(uint64(l))
	}
	if m.IsActive {
		n += 2
	}
	if m.Page != 0 {
		n += 1 + sovDoctorTimes(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovDoctorTimes(uint64(m.Limit))
	}
	l = len(m.OrderBy)
	if l > 0 {
		n += 1 + l + sovDoctorTimes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDoctorTimes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDoctorTimes(x uint64) (n int) {
	return sovDoctorTimes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DoctorTimeStatusReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctorTimes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoctorTimeStatusReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoctorTimeStatusReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepartmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorTimes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepartmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorTimes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorTimes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorTimes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDoctorTimes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DoctorTimeStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctorTimes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoctorTimeStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoctorTimeStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorTimes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDoctorTimes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DoctorTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctorTimes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoctorTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoctorTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorTimes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepartmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorTimes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepartmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorTimes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorTimes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorTimes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorTimes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorTimes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorTimes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorTimes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorTimes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDoctorTimes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DoctorTimes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctorTimes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoctorTimes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoctorTimes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorTimes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorTimes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorTimes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorTimes = append(m.DoctorTimes, &DoctorTime{})
			if err := m.DoctorTimes[len(m.DoctorTimes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDoctorTimes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateDoctorTimeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctorTimes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateDoctorTimeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateDoctorTimeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepartmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorTimes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepartmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorTimes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorTimes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorTimes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorTimes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorTimes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDoctorTimes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDoctorTimeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctorTimes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDoctorTimeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDoctorTimeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorTimes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorTimes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepartmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorTimes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepartmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorTimes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorTimes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorTimes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorTimes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorTimes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDoctorTimes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DoctorTimeFieldValueReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctorTimes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoctorTimeFieldValueReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoctorTimeFieldValueReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorTimes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorTimes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorTimes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDoctorTimes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DoctorTimeDeleteStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctorTimes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoctorTimeDeleteStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoctorTimeDeleteStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorTimes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDoctorTimes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllDoctorTimesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctorTimes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllDoctorTimesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllDoctorTimesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorTimes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorTimes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorTimes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorTimes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorTimes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorTimes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDoctorTimes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDoctorTimes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDoctorTimes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDoctorTimes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDoctorTimes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDoctorTimes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDoctorTimes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDoctorTimes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDoctorTimes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDoctorTimes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDoctorTimes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDoctorTimes = fmt.Errorf("proto: unexpected end of group")
)
